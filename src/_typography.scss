// SCSS mixins
// ---------------------------------------

@if not $modular-scale-map {
	@warn "Please include the utility law 'modular-scale.scss'";
}

// Global variables used in mixins.

// Number of breakpoints.
$breakpoints-limit: length($type-breakpoints);

// List of rootsizes, breakpoints, and max-widths.
$sizes: map-values($rootsizes);
$points: map-values($type-breakpoints);


// Breakpoints. Either set one to one of the breakpoint variables, or use a custom value for minor breakpoints.
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin roar-breakpoint($break: 0, $max: 0) {
	// Type of break variable
	$value: type-of($break);

	// If it is a string (i.e. a breakpoint variable).
	@if $value == string {
		// If using 'break-1', 'break-2' etc output the correct breakpoints from map.
		@if map-has-key($type-breakpoints, $break) {
			@media screen and (min-width: #{map-get($type-breakpoints, $break) / 16 * 1em} ) { @content; }
		} @else {
			@warn "#{$break} is not a set breakpoint variable";
		}

		// If it is a number, use this for the breakpoint.
	} @else if $value == number {
		// If using other numbers output value in ems either for min, min & max or max width breakpoints.
		$query: "all" !default;
		@if      $break != 0 and $max != 0 { $query: "(min-width: #{$break / 16 * 1em}) and (max-width: #{$max / 16 * 1em})"; }
		@else if $break != 0 and $max == 0 { $query: "(min-width: #{$break / 16 * 1em})"; }
		@else if $break == 0 and $max != 0 { $query: "(max-width: #{$max / 16 * 1em})"; }
		@media #{$query} { @content; }

	} @else {
		@warn "#{$break} is not valid to use as a breakpoint";
	}
}

// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize() {
	font-size: nth($sizes, 1) / 16 * 100%;

	// Loop through breakpoints.
	@for $i from 2 through $breakpoints-limit {
		@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
			font-size: nth($sizes, $i) / 16 * 100%;
		}
	}
}

// Value in scale in $modular-scale?
// Used in following fontsize mixin.
@function in-modular-scale($scale, $key) {
	$map: map-get($modular-scale-map, $scale);
	$output: map-has-key($map, $key);
	@return $output;
}

// Font-size in rems. Either set per breakpoint or for all.
// Use values as you would for pixels i.e. 16 or use values from the modular scale.
@mixin roar-fontsize($fontsize, $breakpoint: 0) {
	// Type of chosen variables.
	$font-value: type-of($fontsize);
	$break-value: type-of($breakpoint);

	// Check if value exists in scale.
	$in-scale: in-modular-scale(scale-0, $fontsize);

	// If specifying a breakpoint to use (and breakpoint exists).
	@if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {

		// If using a number for fontsize.
		@if $font-value == number {
			font-size: #{$fontsize / nth($sizes, ($breakpoint + 1))}rem;

			// If using a variable from the scale for fontsize.
		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-#{$breakpoint});
			$get-size: map-get($get-scale, $fontsize);

			font-size: #{$get-size / nth($sizes, ($breakpoint + 1))}rem;

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

		// If want to use value for all breakpoints.
	} @else if $breakpoint == all {

		// If using a number for fontsize.
		@if $font-value == number {
			font-size: #{$fontsize / nth($sizes, 1)}rem;

			// Loop through breakpoints.
			@for $i from 2 through $breakpoints-limit {
				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					font-size: #{$fontsize / nth($sizes, $i)}rem;
				}
			}

			// If using a variable from the scale for fontsize.
		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-0);
			$get-size: map-get($get-scale, $fontsize);
			font-size: #{$get-size / nth($sizes, 1)}rem;

			// Loop through breakpoints.
			@for $i from 2 through $breakpoints-limit {
				$get-scale: map-get($modular-scale-map, scale-#{$i - 1});
				$get-size: map-get($get-scale, $fontsize);

				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					font-size: #{$get-size / nth($sizes, $i)}rem;
				}
			}

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

	} @else {
		@warn "#{$breakpoint} is not valid to use as a breakpoint";
	}
}

// Advanced baseline magic.
// ! Read the README to help understand what is going on here.
// Parts based on https://gist.github.com/razwan/10662500
@mixin roar-baseline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {
	// Type of chosen variables.
	$font-value: type-of($fontsize);
	$break-value: type-of($breakpoint);

	// Cap height
	$cap-height: map-get($font, cap-height);

	// Check if value exists in scale.
	$in-scale: in-modular-scale(scale-0, $fontsize);

	// Set the line-height.
	line-height: #{$lineheight}rem;

	// If specifying a breakpoint to use (and breakpoint exists).
	@if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {

		// If using a number for fontsize.
		@if $font-value == number {
			$rootsize: nth($sizes, ($breakpoint + 1));
			$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};

			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

			// If using a variable from the scale for fontsize.
		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-#{$breakpoint});
			$get-size: map-get($get-scale, $fontsize);
			$rootsize: nth($sizes, ($breakpoint + 1));

			$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};

			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

		// If want to use value for all breakpoints.
	} @else if $breakpoint == all {

		// If using a number for fontsize.
		@if $font-value == number {
			$rootsize: nth($sizes, 1);
			$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};

			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

			// Loop through breakpoints.
			@for $i from 2 through $breakpoints-limit {
				$rootsize: nth($sizes, $i);
				$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
				$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};

				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					margin-bottom: #{$baseline-push}rem;
					padding-top: #{$baseline-shift}rem;
				}
			}

			// If using a variable from the scale for fontsize.
		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-0);
			$get-size: map-get($get-scale, $fontsize);
			$rootsize: nth($sizes, 1);

			$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};

			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

			// Loop through breakpoints.
			@for $i from 2 through $breakpoints-limit {
				$get-scale: map-get($modular-scale-map, scale-#{$i - 1});
				$get-size: map-get($get-scale, $fontsize);
				$rootsize: nth($sizes, $i);

				$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
				$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};

				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					margin-bottom: #{$baseline-push}rem;
					padding-top: #{$baseline-shift}rem;
				}
			}

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

	} @else {
		@warn "#{$breakpoint} is not valid to use as a breakpoint";
	}
}

// Set fontsize and baseline at once. Mix of fontsize and baseline mixin.
@mixin sassline($fontsize, $font, $lineheight: 2, $below: 2, $breakpoint: 0) {
	$font-value: type-of($fontsize);
	$break-value: type-of($breakpoint);
	$cap-height: map-get($font, cap-height);
	$in-scale: in-modular-scale(scale-0, $fontsize);

	line-height: #{$lineheight}rem;

	@if $break-value == number and $breakpoint <= ($breakpoints-limit - 1) and $breakpoint >= 0 {

		@if $font-value == number {
			$rootsize: nth($sizes, ($breakpoint + 1));
			$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};
			font-size: #{$fontsize / nth($sizes, ($breakpoint + 1))}rem;
			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-#{$breakpoint});
			$get-size: map-get($get-scale, $fontsize);
			$rootsize: nth($sizes, ($breakpoint + 1));
			$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};
			font-size: #{$get-size / nth($sizes, ($breakpoint + 1))}rem;
			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

	} @else if $breakpoint == all {

		@if $font-value == number {
			$rootsize: nth($sizes, 1);
			$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};
			font-size: #{$fontsize / nth($sizes, 1)}rem;
			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

			@for $i from 2 through $breakpoints-limit {
				$rootsize: nth($sizes, $i);
				$baseline-shift: #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001};
				$baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)};
				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					font-size: #{$fontsize / nth($sizes, $i)}rem;
					margin-bottom: #{$baseline-push}rem;
					padding-top: #{$baseline-shift}rem;
				}
			}

		} @else if $in-scale == true {
			$get-scale: map-get($modular-scale-map, scale-0);
			$get-size: map-get($get-scale, $fontsize);
			$rootsize: nth($sizes, 1);
			$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
			$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};
			font-size: #{$get-size / nth($sizes, 1)}rem;
			margin-bottom: #{$baseline-push}rem;
			padding-top: #{$baseline-shift}rem;

			@for $i from 2 through $breakpoints-limit {
				$get-scale: map-get($modular-scale-map, scale-#{$i - 1});
				$get-size: map-get($get-scale, $fontsize);
				$rootsize: nth($sizes, $i);
				$baseline-shift: #{($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001};
				$baseline-push: #{$below - (($get-size / 2 * (($lineheight * $rootsize / $get-size) - $cap-height)) / $rootsize + 0.00001)};
				@media screen and (min-width: nth($points, $i) / 16 * 1em ) {
					font-size: #{$get-size / nth($sizes, $i)}rem;
					margin-bottom: #{$baseline-push}rem;
					padding-top: #{$baseline-shift}rem;
				}
			}

		} @else {
			@warn "#{$fontsize} is not a valid scale variable";
		}

	} @else {
		@warn "#{$breakpoint} is not valid to use as a breakpoint";
	}
}


@mixin show-baseline-grid($baseline-grid-color:cyan) {
	background-image: -webkit-linear-gradient(top, $baseline-grid-color 0, rgba(255, 255, 255, 0) 1px);
	background-image: -moz-linear-gradient(top, $baseline-grid-color 0, rgba(255, 255, 255, 0) 1px);
	background-image: -o-linear-gradient(top, $baseline-grid-color 0, rgba(255, 255, 255, 0) 1px);
	background-image: linear-gradient(to bottom, $baseline-grid-color 0, rgba(255, 255, 255, 0) 1px);
	background-repeat: repeat-y;
	background-size: 100% 1rem;
}

//
//@mixin fancy-link($bg-color,$size:normal) {
//	@if $size == normal {
//		text-shadow: 2px 0 $bg-color, 1px 0 $bg-color, -1px 0 $bg-color, -2px 0 $bg-color, 0 2px $bg-color, 0 1px $bg-color;
//		background-position: 0 90%;
//	}
//	@if $size == tiny {
//		text-shadow: 2px 0 $bg-color, 1px 0 $bg-color, -1px 0 $bg-color, -2px 0 $bg-color, 0 2px $bg-color, 0 1px $bg-color;
//		background-position: 0 95%;
//	}
//	@if $size == small {
//		text-shadow: 2px 0 $bg-color, 1px 0 $bg-color, -1px 0 $bg-color, -2px 0 $bg-color, 0 2px $bg-color, 0 1px $bg-color;
//		background-position: 0 91%;
//	}
//	@if $size == large {
//		text-shadow: 2px 0 $bg-color, 1px 0 $bg-color, -1px 0 $bg-color, -2px 0 $bg-color, 0 2px $bg-color, 0 1px $bg-color;
//		background-position: 0 91%;
//	}
//}
